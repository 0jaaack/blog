---
import { randomBytes } from "node:crypto";
import mime from "mime-types";

interface Props {
  images?: {
    src: string;
    alt: string;
  }[];
  videos?: {
    src: string[];
    poster: string;
  }[];
}
const { images = [], videos = [] } = Astro.props;
const galleryId = randomBytes(4).toString("hex");
---

<swiper-container id={galleryId} init="false">
  {videos.map((video) => (
    <swiper-slide>
      <img src={video.poster} alt="" loading="lazy" />
    </swiper-slide>
  ))}
  {images.map((image) => (
    <swiper-slide>
      <img src={image.src} alt={image.alt} loading="lazy" />
    </swiper-slide>
  ))}
</swiper-container>
<dialog id={`dialog-${galleryId}`}>
  {videos.map((video) => (
    <video poster={video.poster} autoplay muted controls playsinline aria-hidden="true">
      {video.src.map((src) => {
        const type = mime.lookup(src);
        if (type === false) return null;
        return <source src={src} type={type} />;
      })}
    </video>
  ))}
  {images.map((image) => (
    <img src={image.src} alt={image.alt} loading="lazy" aria-hidden="true" />
  ))}
</dialog>
<script>
  import { register } from 'swiper/element/bundle';

  const setCurrentSource = (() => {
    let currentSource: string | null = null;

    return (src: string | null) => {
      const dialog = document.querySelector(`dialog:has([src="${src ?? currentSource}"])`) ?? document.querySelector(`dialog:has([poster="${src ?? currentSource}"])`);
      if (!(dialog instanceof HTMLDialogElement)) return;

      currentSource = src;

      dialog.querySelectorAll('img, video').forEach((element: Element) => {
        if (!(element instanceof HTMLImageElement || element instanceof HTMLVideoElement)) return;
        const isCurrent = element.src === src || (element instanceof HTMLVideoElement && element.poster === src);
        element.setAttribute('aria-hidden', isCurrent ? 'false' : 'true');
      });

      const handleBackdropClick = (event: MouseEvent) => {
        if (event.target === dialog) {
          dialog.close();
          dialog.removeEventListener('click', handleBackdropClick);
        }
      };

      if (src == null) {
        dialog.close();
      } else {
        dialog.showModal();
        dialog.addEventListener('click', handleBackdropClick);
      }
    };
  })();

  const params = {
    navigation: true,
    loop: true,
    grabCursor: true,
    spaceBetween: 8,
    slidesPerView: "auto",
    centeredSlides: true,
    on: {
      click: (_: unknown, event: MouseEvent) => {
        if (!(event.target instanceof HTMLImageElement || event.target instanceof HTMLVideoElement)) {
          return;
        }
        setCurrentSource(event.target.src);
      }
    },
    injectStyles: [`
      .swiper-button-prev,
      .swiper-button-next {
        width: 10%;
        height: 100%;
        position: absolute;
        top: 0;
        margin: 0;
      }
      .swiper-button-prev {
        left: -2%;
        mask-image: linear-gradient(to left, transparent, var(--foreground-color));
        background-color: var(--foreground-color);
      }
      .swiper-button-next {
        right: -2%;
        mask-image: linear-gradient(to right, transparent, var(--foreground-color));
        background-color: var(--foreground-color);
      }
      :is(.swiper-button-prev, .swiper-button-next) svg {
        display: none;
      }
    `]
  };

  function init() {
    document.querySelectorAll('swiper-container').forEach(gallery => {
      Object.assign(gallery, params);
      gallery.initialize();
    });
  }

  register();
  init();

  document.addEventListener("astro:after-swap", init);
</script>
<style>
  swiper-container {
    width: 100%;
    margin-top: 52px;
    margin-bottom: 16px;
    opacity: 0.9;
  }

  swiper-slide {
    width: 80%;
    margin: auto 0;
  }

  swiper-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 10px;
  }

  .swiper-slide-active img {
    border: 1px solid var(--foreground-color);
  }

  dialog {
    max-width: min(800px, calc(100vw - 16px));
    margin: auto;
    padding: 6px;
    background: #e3e3e3;
    border: none;
    outline: none;
  }

  dialog :is(img, video) {
    outline: none;
  }

  dialog button[aria-label="Close"] {
    position: absolute;
    top: 0;
    right: 0;
    padding: 8px;
    color: #000000;
    outline: none;
  }

  dialog::backdrop {
    backdrop-filter: brightness(20%);
    overflow: hidden;
    overscroll-behavior: none;
  }

  dialog [aria-hidden="true"] {
    display: none;
  }

  :root:has(dialog[open]) #root {
    overflow: hidden;
  }
</style>
