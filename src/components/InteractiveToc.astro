---
import type { MarkdownHeading } from 'astro';

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;
---
<script>
	const tocElement = document.getElementById('toc');

	if (tocElement == null) {
		throw new Error('Table of contents element not found');
	}

	const headingElements = Array.from(tocElement.querySelectorAll('li[data-toc]'));
	const headings = headingElements.map((element) => (element as HTMLElement).dataset.toc);
	let currentEntry: IntersectionObserverEntry | null = null;

	const observerCallback: IntersectionObserverCallback = (entries) => {
		entries.forEach((entry) => {
			const { intersectionRatio, isIntersecting, target } = entry;

			if (!isIntersecting) {
				return;
			}
			if (currentEntry != null && currentEntry.intersectionRatio > intersectionRatio) {
				return;
			}

			currentEntry = entry;

			const highlightedIndex = headings.findIndex((heading) => heading === target.id);

			headingElements.forEach((element, index) => {
				if (index === highlightedIndex) {
					element.classList.add('highlighted');
				} else {
					element.classList.remove('highlighted');
				}
			});
		});
	};
	const observerOptions = {
		rootMargin: '0px 0px -50%',
		threshold: [...Array(100)].map((_, index) => index / 100),
	};

	headings
		.map((heading) => document.querySelector(`#${heading}`))
		.filter((element) => element != null)
		.forEach((element) => {
			const observer = new IntersectionObserver(observerCallback, observerOptions);
			observer.observe(element);
		});
</script>
<aside id="toc">
	<ul>
		{headings.map((heading) => (
			<li data-toc={heading.slug} class={`level-${heading.depth}`}>
				<a href={`#${heading.slug}`}>{heading.text}</a>
			</li>
		))}
	</ul>
</aside>
<style>
	@keyframes fadeIn {
		from {
			transform: translate(-5px);
			opacity: 0;
		}
		to {
			transform: translateX(0);
			opacity: 1;
		}
	}

  @media (max-width: 480px) {
    #toc {
      display: none;
    }
  }

	#toc {
		position: sticky;
		top: 150px;
		width: 1px;
		height: 1px;
	}

	#toc ul {
		width: 76px;
		padding: 20px;
		cursor: pointer;
		list-style-type: none;
	}

	#toc ul li {
		height: 2px;
		background-color: var(--color-quaternary);
		margin-block-end: 16px;
		margin-inline-start: auto;
	}

	#toc ul li.highlighted {
		background-color: var(--color-primary);
	}

	#toc li.level-1 {
		width: 24px;
	}

	#toc li.level-2 {
		width: 20px;
	}

	#toc li.level-3 {
		width: 16px;
	}

	#toc li a {
		display: none;
		padding: 4px 6px;
		font-size: 13px;
		color: var(--color-quaternary);
		border-radius: 2px;
	}

	#toc:hover ul {
		width: max-content;
    animation: 0.5s ease fadeIn;
		will-change: transform, opacity;
	}

	#toc:hover ul li {
		width: unset;
		height: unset;
		margin-block-end: 3px;
		background-color: unset;
		border-radius: 4px;
	}

	#toc:hover ul li.level-2 {
		margin-inline-start: 10px;
	}

	#toc:hover ul li.level-3 {
		margin-inline-start: 20px;
	}

  #toc:hover ul li a {
		display: block;
	}

  #toc:hover ul li a:hover {
		color: var(--color-secondary);
		background-color: var(--foreground-color);
	}

	#toc:hover ul li.highlighted a {
		color: var(--color-primary);
	}
</style>
