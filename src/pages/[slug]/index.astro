---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import TimeStamp from '../../components/TimeStamp.astro';
import undo from '../../assets/undo.svg?raw';
import ThemeButton from '../../components/ThemeButton';

type Props = CollectionEntry<'essays'>;

export async function getStaticPaths() {
	const essays = await getCollection('essays');
	return essays.map((essay) => ({
		params: { slug: essay.slug },
		props: essay,
	}));
}

const essay = Astro.props;
const { Content, headings } = await essay.render();
const headingsWithoutFootnotes = headings.filter((heading) => heading.text !== 'Footnotes');
---

<html lang="ko">
	<head>
		<BaseHead
			title={essay.data.title}
			description="공재혁 블로그"
			essay={essay}
		/>
	</head>
	<body>
		<div class="container">
			<main>
				<div class="button-collection">
					<a href="/" class="icon-button">
						<Fragment set:html={undo} />
					</a>
					<ThemeButton client:only="preact" />
				</div>
				<article>
					<TimeStamp date={essay.data.publishedDate} />
					<h1>{essay.data.title}</h1>
					<Content />
				</article>
			</main>
			<aside id="toc">
				<ul>
					{headingsWithoutFootnotes.map(heading => (
						<li data-toc={heading.slug} class={`level-${heading.depth}`} />
					))}
				</ul>
			</aside>
		</div>
		<script>
			const tocElement = document.getElementById('toc');

			if (tocElement == null) {
				throw new Error('Table of contents element not found');
			}

			const headingElements = Array.from(tocElement.querySelectorAll('[data-toc]'));
			const headings = headingElements.map((element) => (element as HTMLElement).dataset.toc);
			let currentEntry: IntersectionObserverEntry | null = null;

			const observerCallback: IntersectionObserverCallback = (entries) => {
				entries.forEach((entry) => {
					const { intersectionRatio, isIntersecting, target } = entry;

					if (!isIntersecting) {
						return;
					}
					if (currentEntry != null && currentEntry.intersectionRatio > intersectionRatio) {
						return;
					}

					currentEntry = entry;

					const highlightedIndex = headings.findIndex((heading) => heading === target.id);

					headingElements.forEach((element, index) => {
						if (index === highlightedIndex) {
							element.classList.add('highlighted');
						} else {
							element.classList.remove('highlighted');
						}
					});
				});
			};
			const observerOptions = {
				rootMargin: '0px 0px -80%',
				threshold: [...Array(100)].map((_, index) => index / 100),
			};

			headings
				.map((heading) => document.querySelector(`#${heading}`))
				.filter((element) => element != null)
				.forEach((element) => {
  				const observer = new IntersectionObserver(observerCallback, observerOptions);
  				observer.observe(element);
				});
		</script>
	</body>
</html>
<style is:global>
	.container {
		display: flex;
		max-width: 624px;
		margin: 0 auto;
	}

	main {
		width: 100%;
	  padding: 60px 24px;
	}

	article {
		color: var(--color-secondary);
	}

	article > time {
		color: var(--color-secondary);
		font-size: 12px;
		margin-inline-start: 4px;
		vertical-align: bottom;
	}

	article > h1 {
		font-size: 28px;
		margin-block-end: 28px;
	}

	article > h2 {
		font-size: 20px;
		margin-block-start: 48px;
		margin-block-end: 20px;
	}

	article p {
		color: var(--color-secondary);
		line-height: 30px;
		margin-block-start: 20px;
		margin-block-end: 24px;
	}

	article blockquote > p {
		color: var(--color-tertiary);
		font-size: 14px;
		border-radius: 4px;
	}

	article blockquote > p::before {
		content: "* ";
	}

	article > :is(ul, ol) {
		margin-block: 20px;
	}

	article > :is(ul, ol) > li{
		line-height: 28px;
	}

	article > :is(ul, ol) > li > p:first-of-type {
		padding-inline-start: 4px;
		margin-block: 20px;
	}

	article pre {
		background-color: var(--foreground-color) !important;
		overflow: auto !important;
		padding: 20px;
		border-radius: 4px;
	}

	article p code {
		padding-inline: 4px;
		color: var(--color-secondary);
		font: monospace;
	}

	article pre code {
		line-height: 20px;
	}

	img + em {
	  display: block;
		font-size: 14px;
		font-style: normal;
		color: var(--color-tertiary);
	}

	article a {
		text-decoration: underline;
		text-underline-offset: 4px;
	}

	article sup a {
		color: var(--color-primary);
		text-decoration: none;
	}

	article .footnotes {
		color: var(--color-tertiary);
		font-size: 14px;
		padding-block-start: 16px;
		margin-block-start: 48px;
		border-top: 1px solid var(--color-quaternary);
	}

	article .footnotes li {
		margin-block-start: 12px;
	}

	h2.sr-only {
		display: none;
	}

	.button-collection {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-block-end: 12px;
	}

	#toc {
		position: sticky;
		top: 150px;
		width: 1px;
		height: 1px;
	}

	#toc ul {
		width: 60px;
		padding: 20px;
		cursor: pointer;
		list-style-type: none;
	}

	#toc li {
		height: 2px;
		background-color: var(--color-quaternary);
		border-radius: 2px;
		margin-block-end: 16px;
	}

	#toc li.highlighted {
		background-color: var(--color-primary);
	}

	#toc li.level-1 {
		width: 24px;
	}

	#toc li.level-2 {
		width: 20px;
	}

	#toc li.level-3 {
		width: 16px;
	}
</style>
